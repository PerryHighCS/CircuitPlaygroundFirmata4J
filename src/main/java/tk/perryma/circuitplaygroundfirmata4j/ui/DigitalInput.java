/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tk.perryma.circuitplaygroundfirmata4j.ui;

import java.awt.Color;
import java.awt.Graphics;
import org.firmata4j.Pin;

/**
 *
 * @author bdahl
 */
public class DigitalInput extends PinPanel {

    private final Pin pin;
    
    /**
     * Creates new DigitalInput Pin Display
     * @param pin
     *          The pin whose data is being displayed
     */
    public DigitalInput(Pin pin) {
        this.pin = pin;
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(276, 43));
        setMinimumSize(new java.awt.Dimension(276, 43));
        setPreferredSize(new java.awt.Dimension(276, 43));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 276, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 43, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void showValue(long value) {
        drawState(value != 0, null);
        
        System.out.println("Pin " + pin.getIndex() + " " + value);
    }

    @Override
    public void paint(Graphics g) {        
        super.paint(g);
        drawState(pin.getValue() != 0, g);
    }
    
    public void drawState(boolean on, Graphics g) {
        boolean dispose = false;
        if (g == null) {
            g = getGraphics();
            dispose = true;
        }
                
        if (on) {
            g.setColor(Color.green);
        }
        else {
            g.setColor(Color.black);
        }
        
        int diameter = Math.min(getWidth(), getHeight());
        int x = (getWidth() - diameter) / 2;
        int y = (getHeight() - diameter) / 2;
        
        g.fillOval(x, y, diameter, diameter);
        
        if (dispose) {
            g.dispose();
        }            
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
